# Default values for sysdig-image-scanner.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: sysdiglabs/opa-image-scanner
  pullPolicy: Always

service:
  port: 8443

serviceAccount:
  name:

sysdigSecureApiUrl: https://api.sysdigcloud.com
# Put your <Sysdig-Secure-Secret-Token> in this value
sysdigSecureToken: ""

#Set to true to increase verbosity and output OPA input and rules in the log
verboseLog: false

scanPolicies:

  # If set to "true", a default set of rules will be generated from this YAML values.
  # Otherwise, no rules will be generated, and only "customRules" below will apply
  autoGenerate: true

  # Default admission policy to apply: [accept | reject | scan-result]
  defaultPolicy: scan-result

  # What should we do if the Scan Result is not yet available (scan in progress): [accept | reject]
  reportPending: reject

  # What should we do if the Scan has failed (wrong credentials, misconfiguration, etc.): [accept | reject]
  scanFailed: reject

  customPolicies:
    - prefix: "my.totally-trusted-registry.com/"
      action: accept
    - prefix: "bad-registry.com/specific-repo/"
      action: scan-result
    - prefix: "bad-registry.com/"
      action: reject
    - prefix: "malware-registry.io/"
      action: reject

  alwaysScanResult: []

  byNamespace: {}
  #  ns-dev:
  #    # By default, images will be accepted in this NS regardless of the scan result
  #    defaultPolicy: accept
  #  ns-prod:
  #    # All images rejected by default in this namespace
  #    defaultPolicy: reject
  #    # Images from "my-trusted-registry.com/" will be always accepted
  #    customPolicies:
  #      - prefix: "my-trusted-registry.com/"
  #        action: accept
  #      - prefix: "docker.io/"
  #        action: scan-result
  #  ns-playground:
  #    defaultPolicy: accept
  #    customPolicues: []

# Define a set of custom rego rules. If scanPolicies.autoGenerate is true, 
# these customRules are appended to the set of generated rules. 
# Otherwise, these customRules are the only rules definition,
customRules: |
      my_example_rule {
          # Some conditions...
          false
      }

      other_rule {
          # Some other conditions...
          true
      }

      deny_image["This is a custom deny message"] {
          my_example_rule
          other_rule
      }

preScanPolicies:

  autoGenerate: true

  defaultPolicy: scan

  customPolicies:
    - prefix: "my.totally-trusted-registry.com/"
      action: accept
    - prefix: "bad-registry.com/specific-repo/"
      action: scan
    - prefix: "bad-registry.com/"
      action: reject
    - prefix: "malware-registry.io/"
      action: reject
  
  byNamespace: 

    customer1:
      defaultPolicy: reject
      customPolicies:
        - prefix: "customer1.private-registry.com/"
          action: accept

    customer2:
      defaultPolicy: reject
      customPolicies:
        - prefix: "customer2.private-registry.com/"
          action: accept

    ns-prod:
      defaultPolicy: reject
      customPolicies:
        - prefix: "my-trusted-registry.com/"
          action: accept

    ns-playground:
      defaultPolicy: accept
      customPolicies: []


# Define a set of custom rego rules. If preScanPolicies.autoGenerate is true, 
# these preCustomRules are appended to the set of generated rules. 
# Otherwise, these preCustomRules are the only rules definition,
preCustomRules: |
      my_example_rule {
          # Some conditions... 
          false
      }

      other_rule {
          # Some other conditions...
          true
      }

      allow_pod {
          # Put conditions in here
          false
      }

      deny_pod["This is a custom deny message"] {
          my_example_rule
          other_rule
      }

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
